//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package hybridmeter;

//
// TODO auto-generated module
//


import inet.physicallayer.wireless.common.contract.packetlevel.IRadioMedium;
import inet.visualizer.contract.IIntegratedVisualizer;
import simprime2.DLMSCOSEMBN;
import simprime2.PLCLLCBN;
import simprime2.PLCMACBN;
import simprime2.PLCPHYBN;


module PLC_Hybrid_BN
{
    parameters:
        @networkNode();
        @labels(node,ethernet-node);
        @display("i=device/server2");

        bool hasRF = default(firstAvailableOrEmpty("RF") != "");
        bool hasPRIME = default(firstAvailableOrEmpty("PRIME") != "");

        //*.interfaceTableModule = "^.interfaceTable"; // Already defined in WirelessNodeBasic
        //wlan.radio.antenna.mobilityModule = default("^.^.^.mobility"); // Already defined in WirelessNodeBasic
        

    gates:
        inout ethg @labels(EtherFrame-conn);
        input radioIn @directIn;

    submodules:

        BNApp: DLMSCOSEMBN {
            parameters:
                registerSAP = true;
                @display("p=155,40,col");
        }

        llc: PLCLLCBN {
            parameters:
                @display("p=155,120;q=txQueue");
                baseNode = true;
        }
        mac: PLCMACBN {
            parameters:

                @display("p=155,200;q=txQueue");
                interPromotionTime = default(20);
        }


        plclan: PLCPHYBN if hasPRIME {
            parameters:
                @display("p=242,310,row,150;q=txQueue");
        }



//        PHYLayerAbstraction: RfPhysicalInterface {
//            parameters:
//                @display("p=280.84,353.52798");
//        }

//        li: MessageDispatcher {
//            parameters:
//                @display("p=153,293;b=263,12,,,,1");
//        }

		// Todo esto de aquí se podría sustituir por WirelessNodeBasic, verdad?
//        wlan: Ieee802154NarrowbandInterface if hasRF {
//            parameters:
//                @display("p=100,309;q=queue");
//                mgmt.typename = "Ieee80211MgmtStaSimplified";
//                agent.typename = "";
//        }
//        interfaceTable: InterfaceTable {
//            parameters:
//                @display("p=61,40;is=s");
//        }
//        mobility: StationaryMobility if hasRF {
//            parameters:
//                @display("p=100,200;is=s");
//        }

        rflan: WirelessNodeBasic if hasRF {

            @display("p=99,302");
        }



    connections allowunconnected:
        llc.lowerLayerIn <-- mac.upperLayerOut;
        llc.lowerLayerOut --> mac.upperLayerIn;


        BNApp.out --> llc.upperLayerIn;
        BNApp.in <-- llc.upperLayerOut;


		// Cambios aquí porque las puertas de mac NO son vectoriales.
		// No he querido cambiar el código de simPRIME2 

        //        plclan.upperLayerIn <-- mac.physOut++ if hasPRIME;
        //        plclan.upperLayerOut --> mac.physIn++ if hasPRIME;
        plclan.upperLayerIn <-- mac.physPLCOut if hasPRIME;
        plclan.upperLayerOut --> mac.physPLCIn if hasPRIME;


        //          mac.physIn++ <-- rflan.upperLayerOut if hasRF;
        //        mac.physOut++ --> rflan.upperLayerIn if hasRF;
        mac.physRFIn <-- rflan.upperLayerOut if hasRF;
        mac.physRFOut --> rflan.upperLayerIn if hasRF;


        ethg <--> { @display("m=s"); } <--> plclan.phys if hasPRIME;
        rflan.radioIn <-- radioIn if hasRF;
}
